import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging
import aiosqlite
from fastapi import FastAPI, Request
from datetime import datetime
import subprocess
import re
import sys
import json
import uvicorn
from parser import parse_data
from aiogram.enums import ParseMode
import aiohttp
from datetime import datetime
API_TOKEN = ""

logging.basicConfig(level=logging.INFO)

app = FastAPI()
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

ADMIN_IDS = [540375100, 7028994705]

button_history = KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
button_profile = KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
button_add_balance = KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
button_return = KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
button_buy_subcribe = KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
button_subscribe_7_days = KeyboardButton(text="7 –¥–Ω–µ–π - 390‚ÇΩ")
button_subscribe_30_days = KeyboardButton(text="30 –¥–Ω–µ–π - 990‚ÇΩ")

keyboard_subscribe = ReplyKeyboardMarkup(
    keyboard=[
        [button_subscribe_7_days],
        [button_subscribe_30_days],
        [button_return]
    ],
    resize_keyboard=True
)
@dp.message(lambda message: message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def subscribe_handler(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard_subscribe
    )
@dp.message(lambda message: message.text == "7 –¥–Ω–µ–π - 390‚ÇΩ")
async def subscribe_7_days(message: Message):
    user_id = message.from_user.id
    price = 390

    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT balance, subscribe FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

        if user:
            balance, subscribe = user
            if balance >= price:
                new_balance = balance - price
                new_subscribe = 7 * 86400

                await db.execute(
                    "UPDATE users SET balance = ?, subscribe = ? WHERE user_id = ?",
                    (new_balance, new_subscribe, user_id)
                )
                await db.commit()
                await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ", reply_markup=keyboard_main)
                await notify_admins_for_sub(user_id, price)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=keyboard_main)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(lambda message: message.text == "30 –¥–Ω–µ–π - 990‚ÇΩ")
async def subscribe_30_days(message: Message):
    user_id = message.from_user.id
    price = 990

    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT balance, subscribe FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

        if user:
            balance, subscribe = user
            if balance >= price:
                new_balance = balance - price
                new_subscribe = 30 * 86400

                await db.execute(
                    "UPDATE users SET balance = ?, subscribe = ? WHERE user_id = ?",
                    (new_balance, new_subscribe, user_id)
                )
                await db.commit()
                await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ", reply_markup=keyboard_main)
                await notify_admins_for_sub(user_id, price)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=keyboard_main)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
keyboard_main = ReplyKeyboardMarkup(
    keyboard=[
        [button_profile], [button_buy_subcribe],
        [button_history]
    ],
    resize_keyboard=True
)

keyboard_main_subscribe = ReplyKeyboardMarkup(
    keyboard=[
        [button_profile], [button_history]
    ],
    resize_keyboard=True
)

keyboard_profile = ReplyKeyboardMarkup(
    keyboard=[
        [button_add_balance],
        [button_return]
    ],
    resize_keyboard=True
)

async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            balance INTEGER DEFAULT 0,
            subscribe INTEGER DEFAULT 0,
            history_balance TEXT DEFAULT '',
            history_purchase TEXT DEFAULT '',
            banned INTEGER DEFAULT 0
        )
        """)
        await db.commit()

async def add_user(user_id, username):
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username)
        )
        await db.commit()

def is_admin(user_id):
    return user_id in ADMIN_IDS
#################################################################################################
async def send_car_info_to_telegram(number_auto, message):
    title_text, content_values, additional_values, full_url = parse_data(number_auto)

    if not title_text or not content_values:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return

    if len(additional_values) != len(content_values):
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return

    car_info = {
        additional_values[i]: content_values[i] for i in range(len(additional_values))
    }

    async with aiosqlite.connect("users.db") as db:
        user_id = message.from_user.id
        async with db.execute("SELECT subscribe FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

        if user:
            subscribe = user[0]
            if subscribe > 0:
                car_info_message = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ: {title_text}\n"
                for key, value in car_info.items():
                    car_info_message += f"‚îú {key} `{value}`\n"
                await message.answer(car_info_message, parse_mode="MarkdownV2")
                await message.answer(f"üîó –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: {full_url}\n")
            else:
                car_info_message = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ: {title_text}\n"
                for key, value in car_info.items():
                    car_info_message += f"‚îú {key} `{value}`\n"
                car_info_message += "\n‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                await message.answer(car_info_message, parse_mode="MarkdownV2")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def determine_type(input_string):
    if re.match(r'^[A-HJ-NPR-Z0-9]{17}$', input_string):
        return True
    elif re.match(r'^[A-Z0-9\-]{6,17}$', input_string):
        return True
    elif re.match(r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{1}\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$', input_string):
        return True
    else:
        return False
    
@dp.message(lambda message: determine_type(message.text))
async def process_message(message: Message):
    input_string = message.text
    print(f"Received message: {input_string}")

    try:
        await message.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {input_string} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        await send_car_info_to_telegram(input_string, message)
    except subprocess.CalledProcessError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

@dp.message(Command(commands=["start"]))
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    await add_user(user_id, username)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=keyboard_main)

MERCHANT_ID = ""
SECRET_KEY = ""

@dp.message(lambda message: message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def add_balance_handler(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")


async def create_payment(user_id: int, amount: float):
    order_id = f"{user_id}_{int(datetime.utcnow().timestamp())}"
    url = "https://nicepay.io/public/api/payment"
    amount_in_cents = int(amount * 100)
    data = {
        "merchant_id": MERCHANT_ID,
        "secret": SECRET_KEY,
        "order_id": order_id,
        "customer": user_id,
        "amount": amount_in_cents,
        "currency": "RUB",
        "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            if response.status == 200:
                result = await response.json()
                if result.get("status") == "success":
                    payment_data = result.get("data", {})
                    return {
                        "payment_id": payment_data.get("payment_id"),
                        "link": payment_data.get("link"),
                        "order_id": order_id
                    }
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {result.get('data', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ HTTP: {response.status}")

@dp.message(lambda message: message.text.isdigit())
async def handle_balance_amount(message: Message):
    user_id = message.from_user.id
    amount = float(message.text)

    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
            (amount, user_id)
        )
        await db.commit()

    try:
        payment_result = await create_payment(user_id, amount)
        payment_url = payment_result["link"]
        order_id = payment_result["order_id"]

        await message.answer(f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def notify_admins(user_id: int, amount: float):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üí∞ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω!\n"
                f"üßë‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                f"üíµ –°—É–º–º–∞: {amount}‚ÇΩ\n"
                f"üéâ –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
async def notify_admins_for_sub(user_id: int, amount: float):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üí∞ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–∞!\n"
                f"üßë‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                f"üíµ –°—É–º–º–∞: {amount}‚ÇΩ\n"
                f"üéâ –ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@app.post("/payment/webhook")
async def payment_webhook(request: Request):
    params = await request.json()
    order_id = params.get("order_id")
    status = params.get("result")
    amount = params.get("amount") / 100 

    async with aiosqlite.connect("users.db") as db:
        async with db.execute(
            "SELECT user_id FROM users WHERE user_id = ? AND EXISTS (SELECT 1 FROM payments WHERE order_id = ?)",
            (order_id, order_id)
        ) as cursor:
            payment = await cursor.fetchone()

        if payment:
            user_id = payment[0]
            if status == "success":
                await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
                await db.commit()
                
                await notify_admins(user_id, amount)
                
                return {"status": "success"}
            else:
                return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ"}
        return {"status": "error", "message": "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"}


@dp.message(Command(commands=["admin"]))
async def admin_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/ban <user_id> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                         "/unban <user_id> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                         "/add_balance <user_id> <amount> - –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                         "/subtract_balance <user_id> <amount> - –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å\n"
                         "/extend_subscriptions <user_id> <hours> <days> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")


@dp.message(Command(commands=["extend_subscriptions"]))
async def extend_subscriptions_handler(message: Message):
    async with aiosqlite.connect("users.db") as db:
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            args = message.text.split()[1:]
            if len(args) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /extend_subscriptions <user_id> <hours> <days>")

            user_id, hours, days = int(args[0]), int(args[1]), int(args[2])
            if hours < 0 or days < 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.")
            
            extension_time = hours * 3600 + days * 86400
            cursor = await db.execute(
                "UPDATE users SET subscribe = subscribe + ? WHERE user_id = ? AND subscribe >= 0", 
                (extension_time, user_id)
            )
            await db.commit()

            if cursor.rowcount == 0:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            else:
                await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {hours} —á–∞—Å–æ–≤ –∏ {days} –¥–Ω–µ–π.")
        
        except ValueError as ve:
            await message.answer(f"–û—à–∏–±–∫–∞: {ve}")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT balance, subscribe, banned FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    if user:
        balance, subscribe, banned = user
        if banned == 1:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. @user")
            return
        
        current_time = int(datetime.utcnow().timestamp())
        if subscribe > 0:
            days = subscribe // 86400
            hours = (subscribe % 86400) // 3600
            minutes = (subscribe % 3600) // 60
            subscribe_status = f"–ê–∫—Ç–∏–≤–Ω–∞: {days} –¥–Ω, {hours} —á, {minutes} –º–∏–Ω"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
        else:
            subscribe_status = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        await message.answer(
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscribe_status}\n",
            reply_markup=keyboard_profile
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command(commands=["ban"]))
async def ban_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        args = message.text.split()[1:]
        if len(args) != 1:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <user_id>")
        
        user_id = int(args[0])
        async with aiosqlite.connect("users.db") as db:
            cursor = await db.execute("UPDATE users SET banned = 1 WHERE user_id = ?", (user_id,))
            await db.commit()
        
        if cursor.rowcount == 0:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞: {ve}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(Command(commands=["unban"]))
async def unban_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        args = message.text.split()[1:]
        if len(args) != 1:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban <user_id>")
        
        user_id = int(args[0])
        async with aiosqlite.connect("users.db") as db:
            cursor = await db.execute("UPDATE users SET banned = 0 WHERE user_id = ?", (user_id,))
            await db.commit()
        
        if cursor.rowcount == 0:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞: {ve}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def update_subscriptions():
    while True:
        async with aiosqlite.connect("users.db") as db:
            await db.execute("""
            UPDATE users
            SET subscribe = subscribe - 1
            WHERE subscribe > 0
            """)
            await db.commit()
        await asyncio.sleep(1)

@dp.message(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
async def return_to_main_handler(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT subscribe FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    if user and user[0] > 0:
        keyboard = keyboard_main_subscribe
    else:
        keyboard = keyboard_main

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)

async def main():
    await init_db()
    asyncio.create_task(update_subscriptions())
    asyncio.create_task(run_fastapi())
    await dp.start_polling(bot)

def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

async def run_fastapi():
    loop = asyncio.get_event_loop()
    loop.run_in_executor(None, start_fastapi)

if __name__ == "__main__":
    asyncio.run(main())
